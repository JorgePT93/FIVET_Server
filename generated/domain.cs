//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `domain.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Fivet.ZeroIce
{
    namespace model
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Persona : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public int id;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string rut;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string nombre;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string direccion;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public long telefonoFijo;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public long telefonoMofil;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string email;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Persona()
            {
                this.rut = "";
                this.nombre = "";
                this.direccion = "";
                this.email = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Persona(int id, string rut, string nombre, string direccion, long telefonoFijo, long telefonoMofil, string email)
            {
                this.id = id;
                this.rut = rut;
                this.nombre = nombre;
                this.direccion = direccion;
                this.telefonoFijo = telefonoFijo;
                this.telefonoMofil = telefonoMofil;
                this.email = email;
                ice_initialize();
            }

            #endregion

            private const string _id = "::model::Persona";

            public static new string ice_staticId()
            {
                return _id;
            }
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(id);
                ostr_.writeString(rut);
                ostr_.writeString(nombre);
                ostr_.writeString(direccion);
                ostr_.writeLong(telefonoFijo);
                ostr_.writeLong(telefonoMofil);
                ostr_.writeString(email);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                id = istr_.readInt();
                rut = istr_.readString();
                nombre = istr_.readString();
                direccion = istr_.readString();
                telefonoFijo = istr_.readLong();
                telefonoMofil = istr_.readLong();
                email = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public enum Sexo
        {
            MACHO,
            HEMBRA
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public sealed class SexoHelper
        {
            public static void write(global::Ice.OutputStream ostr, Sexo v)
            {
                ostr.writeEnum((int)v, 1);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public static Sexo read(global::Ice.InputStream istr)
            {
                Sexo v;
                v = (Sexo)istr.readEnum(1);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public enum TipoPaciente
        {
            INTERNO,
            EXTERNO
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public sealed class TipoPacienteHelper
        {
            public static void write(global::Ice.OutputStream ostr, TipoPaciente v)
            {
                ostr.writeEnum((int)v, 1);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public static TipoPaciente read(global::Ice.InputStream istr)
            {
                TipoPaciente v;
                v = (TipoPaciente)istr.readEnum(1);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Ficha : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public int id;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public int numero;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string nombre;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string especie;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string fechaDeNacimiento;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string raza;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Sexo sexo;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string color;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public TipoPaciente tipoPaciente;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Ficha()
            {
                this.nombre = "";
                this.especie = "";
                this.fechaDeNacimiento = "";
                this.raza = "";
                this.color = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Ficha(int id, int numero, string nombre, string especie, string fechaDeNacimiento, string raza, Sexo sexo, string color, TipoPaciente tipoPaciente)
            {
                this.id = id;
                this.numero = numero;
                this.nombre = nombre;
                this.especie = especie;
                this.fechaDeNacimiento = fechaDeNacimiento;
                this.raza = raza;
                this.sexo = sexo;
                this.color = color;
                this.tipoPaciente = tipoPaciente;
                ice_initialize();
            }

            #endregion

            private const string _id = "::model::Ficha";

            public static new string ice_staticId()
            {
                return _id;
            }
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(id);
                ostr_.writeInt(numero);
                ostr_.writeString(nombre);
                ostr_.writeString(especie);
                ostr_.writeString(fechaDeNacimiento);
                ostr_.writeString(raza);
                ostr_.writeEnum((int)sexo, 1);
                ostr_.writeString(color);
                ostr_.writeEnum((int)tipoPaciente, 1);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                id = istr_.readInt();
                numero = istr_.readInt();
                nombre = istr_.readString();
                especie = istr_.readString();
                fechaDeNacimiento = istr_.readString();
                raza = istr_.readString();
                sexo = (Sexo)istr_.readEnum(1);
                color = istr_.readString();
                tipoPaciente = (TipoPaciente)istr_.readEnum(1);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Foto : global::Ice.Value
        {
            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Foto()
            {
                ice_initialize();
            }

            #endregion

            private const string _id = "::model::Foto";

            public static new string ice_staticId()
            {
                return _id;
            }
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Control : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public int id;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string fecha;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string proximoControl;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string temperatura;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public double peso;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public double altura;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string diagnostico;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string veterinario;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Control()
            {
                this.fecha = "";
                this.proximoControl = "";
                this.temperatura = "";
                this.diagnostico = "";
                this.veterinario = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Control(int id, string fecha, string proximoControl, string temperatura, double peso, double altura, string diagnostico, string veterinario)
            {
                this.id = id;
                this.fecha = fecha;
                this.proximoControl = proximoControl;
                this.temperatura = temperatura;
                this.peso = peso;
                this.altura = altura;
                this.diagnostico = diagnostico;
                this.veterinario = veterinario;
                ice_initialize();
            }

            #endregion

            private const string _id = "::model::Control";

            public static new string ice_staticId()
            {
                return _id;
            }
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(id);
                ostr_.writeString(fecha);
                ostr_.writeString(proximoControl);
                ostr_.writeString(temperatura);
                ostr_.writeDouble(peso);
                ostr_.writeDouble(altura);
                ostr_.writeString(diagnostico);
                ostr_.writeString(veterinario);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                id = istr_.readInt();
                fecha = istr_.readString();
                proximoControl = istr_.readString();
                temperatura = istr_.readString();
                peso = istr_.readDouble();
                altura = istr_.readDouble();
                diagnostico = istr_.readString();
                veterinario = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Examen : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public int id;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string nombre;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public string fecha;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Examen()
            {
                this.nombre = "";
                this.fecha = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            public Examen(int id, string nombre, string fecha)
            {
                this.id = id;
                this.nombre = nombre;
                this.fecha = fecha;
                ice_initialize();
            }

            #endregion

            private const string _id = "::model::Examen";

            public static new string ice_staticId()
            {
                return _id;
            }
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(id);
                ostr_.writeString(nombre);
                ostr_.writeString(fecha);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                id = istr_.readInt();
                nombre = istr_.readString();
                fecha = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Contratos : global::Ice.Object, ContratosOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface TheSystem : global::Ice.Object, TheSystemOperations_
        {
        }
    }
}

namespace Ice.TypeId.model
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class Persona
    {
        public abstract global::Fivet.ZeroIce.model.Persona targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class Ficha
    {
        public abstract global::Fivet.ZeroIce.model.Ficha targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class Foto
    {
        public abstract global::Fivet.ZeroIce.model.Foto targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class Control
    {
        public abstract global::Fivet.ZeroIce.model.Control targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class Examen
    {
        public abstract global::Fivet.ZeroIce.model.Examen targetClass { get; }
    }
}

namespace Fivet.ZeroIce
{
    namespace model
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_ingresarFicha(Ficha ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_obtenerFicha(Ficha ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_ingresarDueno(Persona ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_obtenerDueno(Persona ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_ingresarControl(Control ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_ingresarFoto(Foto ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_Contratos_ingresarExamen(Examen ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public delegate void Callback_TheSystem_getDelay(long ret);
    }
}

namespace Fivet.ZeroIce
{
    namespace model
    {
        /// <summary>
        /// The Contratos
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public interface ContratosPrx : global::Ice.ObjectPrx
        {
            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <returns>the ficha</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Ficha ingresarFicha(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Ficha> ingresarFichaAsync(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_ingresarFicha> begin_ingresarFicha(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarFicha(Ficha ficha, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarFicha(Ficha ficha, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the ficha</returns>
            Ficha end_ingresarFicha(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <returns>the Ficha</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Ficha obtenerFicha(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Ficha> obtenerFichaAsync(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_obtenerFicha> begin_obtenerFicha(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_obtenerFicha(int numero, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_obtenerFicha(int numero, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Ficha</returns>
            Ficha end_obtenerFicha(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="Persona">nueva a ingresar
            /// </param>
            /// <returns>the Persona</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Persona ingresarDueno(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Persona> ingresarDuenoAsync(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_ingresarDueno> begin_ingresarDueno(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarDueno(Persona dueno, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarDueno(Persona dueno, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Persona</returns>
            Persona end_ingresarDueno(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="numero">de la Persona a obtener
            /// </param>
            /// <returns>the Persona</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Persona obtenerDueno(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Persona> obtenerDuenoAsync(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_obtenerDueno> begin_obtenerDueno(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_obtenerDueno(string rut, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_obtenerDueno(string rut, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Persona</returns>
            Persona end_obtenerDueno(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="Control">nuevo a ingresar
            /// </param>
            /// <returns>the Control</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Control ingresarControl(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Control> ingresarControlAsync(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_ingresarControl> begin_ingresarControl(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarControl(Control control, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarControl(Control control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Control</returns>
            Control end_ingresarControl(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="Foto">nueva a ingresar
            /// </param>
            /// <returns>the Foto</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Foto ingresarFoto(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Foto> ingresarFotoAsync(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_ingresarFoto> begin_ingresarFoto(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarFoto(Foto foto, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarFoto(Foto foto, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Foto</returns>
            Foto end_ingresarFoto(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="Examen">nuevo a ingresar
            /// </param>
            /// <returns>the Examen</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            Examen ingresarExamen(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Examen> ingresarExamenAsync(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Contratos_ingresarExamen> begin_ingresarExamen(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarExamen(Examen examen, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_ingresarExamen(Examen examen, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>the Examen</returns>
            Examen end_ingresarExamen(global::Ice.AsyncResult asyncResult);
        }

        /// <summary>
        /// The base system.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public interface TheSystemPrx : global::Ice.ObjectPrx
        {
            long getDelay(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<long> getDelayAsync(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TheSystem_getDelay> begin_getDelay(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getDelay(long clientTime, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getDelay(long clientTime, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            long end_getDelay(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Fivet.ZeroIce
{
    namespace model
    {
        /// <summary>
        /// The Contratos
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public interface ContratosOperations_
        {
            /// <summary>
            /// Dado el ingreso de una nueva ficha, retorna dicha ficha:
            /// </summary>
            /// <param name="ficha">nueva a ingresar
            /// </param>
            /// <returns>the ficha</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Ficha ingresarFicha(Ficha ficha, global::Ice.Current current = null);

            /// <summary>
            /// Dado un numero de ficha, retorna la ficha asociada:
            /// </summary>
            /// <param name="numero">de la ficha a obtener
            /// </param>
            /// <returns>the Ficha</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Ficha obtenerFicha(int numero, global::Ice.Current current = null);

            /// <summary>
            /// Dado el ingreso de un nuevo dueno(Persona), retorna dicho dueno:
            /// </summary>
            /// <param name="Persona">nueva a ingresar
            /// </param>
            /// <returns>the Persona</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Persona ingresarDueno(Persona dueno, global::Ice.Current current = null);

            /// <summary>
            /// Dado un rut asociado, retorna el dueno(Persona) asociado:
            /// </summary>
            /// <param name="numero">de la Persona a obtener
            /// </param>
            /// <returns>the Persona</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Persona obtenerDueno(string rut, global::Ice.Current current = null);

            /// <summary>
            /// Dado el ingreso de un nuevo Control, retorna dicho Control:
            /// </summary>
            /// <param name="Control">nuevo a ingresar
            /// </param>
            /// <returns>the Control</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Control ingresarControl(Control control, global::Ice.Current current = null);

            /// <summary>
            /// Dado el ingreso de una nueva foto, retorna dicha foto:
            /// </summary>
            /// <param name="Foto">nueva a ingresar
            /// </param>
            /// <returns>the Foto</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Foto ingresarFoto(Foto foto, global::Ice.Current current = null);

            /// <summary>
            /// Dado el ingreso de un nuevo Examen, retorna dicho Examen:
            /// </summary>
            /// <param name="Examen">nuevo a ingresar
            /// </param>
            /// <returns>the Examen</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            Examen ingresarExamen(Examen examen, global::Ice.Current current = null);
        }

        /// <summary>
        /// The base system.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public interface TheSystemOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
            long getDelay(long clientTime, global::Ice.Current current = null);
        }
    }
}

namespace Fivet.ZeroIce
{
    namespace model
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        [global::System.Serializable]
        public sealed class ContratosPrxHelper : global::Ice.ObjectPrxHelperBase, ContratosPrx
        {
            public ContratosPrxHelper()
            {
            }

            public ContratosPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public Ficha ingresarFicha(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ingresarFichaAsync(ficha, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Ficha obtenerFicha(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_obtenerFichaAsync(numero, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Persona ingresarDueno(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ingresarDuenoAsync(dueno, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Persona obtenerDueno(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_obtenerDuenoAsync(rut, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Control ingresarControl(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ingresarControlAsync(control, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Foto ingresarFoto(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ingresarFotoAsync(foto, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Examen ingresarExamen(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ingresarExamenAsync(examen, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<Ficha> ingresarFichaAsync(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_ingresarFichaAsync(ficha, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Ficha> _iceI_ingresarFichaAsync(Ficha iceP_ficha, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ingresarFicha_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Ficha>(progress, cancel);
                _iceI_ingresarFicha(iceP_ficha, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ingresarFicha_name = "ingresarFicha";

            private void _iceI_ingresarFicha(Ficha iceP_ficha, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Ficha>(completed);
                outAsync.invoke(
                    _ingresarFicha_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_ficha);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Ficha ret = null;
                        istr.readValue((Ficha v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Ficha> obtenerFichaAsync(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_obtenerFichaAsync(numero, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Ficha> _iceI_obtenerFichaAsync(int iceP_numero, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_obtenerFicha_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Ficha>(progress, cancel);
                _iceI_obtenerFicha(iceP_numero, context, synchronous, completed);
                return completed.Task;
            }

            private const string _obtenerFicha_name = "obtenerFicha";

            private void _iceI_obtenerFicha(int iceP_numero, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Ficha>(completed);
                outAsync.invoke(
                    _obtenerFicha_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_numero);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Ficha ret = null;
                        istr.readValue((Ficha v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Persona> ingresarDuenoAsync(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_ingresarDuenoAsync(dueno, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Persona> _iceI_ingresarDuenoAsync(Persona iceP_dueno, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ingresarDueno_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Persona>(progress, cancel);
                _iceI_ingresarDueno(iceP_dueno, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ingresarDueno_name = "ingresarDueno";

            private void _iceI_ingresarDueno(Persona iceP_dueno, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Persona>(completed);
                outAsync.invoke(
                    _ingresarDueno_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_dueno);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Persona ret = null;
                        istr.readValue((Persona v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Persona> obtenerDuenoAsync(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_obtenerDuenoAsync(rut, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Persona> _iceI_obtenerDuenoAsync(string iceP_rut, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_obtenerDueno_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Persona>(progress, cancel);
                _iceI_obtenerDueno(iceP_rut, context, synchronous, completed);
                return completed.Task;
            }

            private const string _obtenerDueno_name = "obtenerDueno";

            private void _iceI_obtenerDueno(string iceP_rut, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Persona>(completed);
                outAsync.invoke(
                    _obtenerDueno_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_rut);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Persona ret = null;
                        istr.readValue((Persona v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Control> ingresarControlAsync(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_ingresarControlAsync(control, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Control> _iceI_ingresarControlAsync(Control iceP_control, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ingresarControl_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Control>(progress, cancel);
                _iceI_ingresarControl(iceP_control, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ingresarControl_name = "ingresarControl";

            private void _iceI_ingresarControl(Control iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Control>(completed);
                outAsync.invoke(
                    _ingresarControl_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_control);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Control ret = null;
                        istr.readValue((Control v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Foto> ingresarFotoAsync(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_ingresarFotoAsync(foto, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Foto> _iceI_ingresarFotoAsync(Foto iceP_foto, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ingresarFoto_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Foto>(progress, cancel);
                _iceI_ingresarFoto(iceP_foto, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ingresarFoto_name = "ingresarFoto";

            private void _iceI_ingresarFoto(Foto iceP_foto, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Foto>(completed);
                outAsync.invoke(
                    _ingresarFoto_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_foto);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Foto ret = null;
                        istr.readValue((Foto v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Examen> ingresarExamenAsync(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_ingresarExamenAsync(examen, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Examen> _iceI_ingresarExamenAsync(Examen iceP_examen, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ingresarExamen_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Examen>(progress, cancel);
                _iceI_ingresarExamen(iceP_examen, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ingresarExamen_name = "ingresarExamen";

            private void _iceI_ingresarExamen(Examen iceP_examen, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Examen>(completed);
                outAsync.invoke(
                    _ingresarExamen_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_examen);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Examen ret = null;
                        istr.readValue((Examen v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Contratos_ingresarFicha> begin_ingresarFicha(Ficha ficha, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_ingresarFicha(ficha, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_ingresarFicha(Ficha ficha, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarFicha(ficha, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_ingresarFicha(Ficha ficha, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarFicha(ficha, context, callback, cookie, false);
            }

            public Ficha end_ingresarFicha(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ingresarFicha_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Ficha>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_ingresarFicha> begin_ingresarFicha(Ficha iceP_ficha, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ingresarFicha_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_ingresarFicha, Ficha>(
                    (Callback_Contratos_ingresarFicha cb, Ficha ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ingresarFicha_name, cookie, completedCallback);
                _iceI_ingresarFicha(iceP_ficha, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_obtenerFicha> begin_obtenerFicha(int numero, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_obtenerFicha(numero, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_obtenerFicha(int numero, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_obtenerFicha(numero, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_obtenerFicha(int numero, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_obtenerFicha(numero, context, callback, cookie, false);
            }

            public Ficha end_obtenerFicha(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _obtenerFicha_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Ficha>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_obtenerFicha> begin_obtenerFicha(int iceP_numero, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_obtenerFicha_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_obtenerFicha, Ficha>(
                    (Callback_Contratos_obtenerFicha cb, Ficha ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _obtenerFicha_name, cookie, completedCallback);
                _iceI_obtenerFicha(iceP_numero, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_ingresarDueno> begin_ingresarDueno(Persona dueno, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_ingresarDueno(dueno, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_ingresarDueno(Persona dueno, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarDueno(dueno, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_ingresarDueno(Persona dueno, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarDueno(dueno, context, callback, cookie, false);
            }

            public Persona end_ingresarDueno(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ingresarDueno_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Persona>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_ingresarDueno> begin_ingresarDueno(Persona iceP_dueno, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ingresarDueno_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_ingresarDueno, Persona>(
                    (Callback_Contratos_ingresarDueno cb, Persona ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ingresarDueno_name, cookie, completedCallback);
                _iceI_ingresarDueno(iceP_dueno, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_obtenerDueno> begin_obtenerDueno(string rut, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_obtenerDueno(rut, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_obtenerDueno(string rut, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_obtenerDueno(rut, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_obtenerDueno(string rut, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_obtenerDueno(rut, context, callback, cookie, false);
            }

            public Persona end_obtenerDueno(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _obtenerDueno_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Persona>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_obtenerDueno> begin_obtenerDueno(string iceP_rut, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_obtenerDueno_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_obtenerDueno, Persona>(
                    (Callback_Contratos_obtenerDueno cb, Persona ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _obtenerDueno_name, cookie, completedCallback);
                _iceI_obtenerDueno(iceP_rut, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_ingresarControl> begin_ingresarControl(Control control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_ingresarControl(control, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_ingresarControl(Control control, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarControl(control, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_ingresarControl(Control control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarControl(control, context, callback, cookie, false);
            }

            public Control end_ingresarControl(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ingresarControl_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Control>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_ingresarControl> begin_ingresarControl(Control iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ingresarControl_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_ingresarControl, Control>(
                    (Callback_Contratos_ingresarControl cb, Control ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ingresarControl_name, cookie, completedCallback);
                _iceI_ingresarControl(iceP_control, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_ingresarFoto> begin_ingresarFoto(Foto foto, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_ingresarFoto(foto, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_ingresarFoto(Foto foto, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarFoto(foto, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_ingresarFoto(Foto foto, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarFoto(foto, context, callback, cookie, false);
            }

            public Foto end_ingresarFoto(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ingresarFoto_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Foto>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_ingresarFoto> begin_ingresarFoto(Foto iceP_foto, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ingresarFoto_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_ingresarFoto, Foto>(
                    (Callback_Contratos_ingresarFoto cb, Foto ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ingresarFoto_name, cookie, completedCallback);
                _iceI_ingresarFoto(iceP_foto, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Contratos_ingresarExamen> begin_ingresarExamen(Examen examen, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_ingresarExamen(examen, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_ingresarExamen(Examen examen, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarExamen(examen, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_ingresarExamen(Examen examen, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_ingresarExamen(examen, context, callback, cookie, false);
            }

            public Examen end_ingresarExamen(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ingresarExamen_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Examen>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Contratos_ingresarExamen> begin_ingresarExamen(Examen iceP_examen, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ingresarExamen_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Contratos_ingresarExamen, Examen>(
                    (Callback_Contratos_ingresarExamen cb, Examen ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ingresarExamen_name, cookie, completedCallback);
                _iceI_ingresarExamen(iceP_examen, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ContratosPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ContratosPrx r = b as ContratosPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ContratosPrxHelper h = new ContratosPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ContratosPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ContratosPrx r = b as ContratosPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ContratosPrxHelper h = new ContratosPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ContratosPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ContratosPrxHelper h = new ContratosPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ContratosPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ContratosPrxHelper h = new ContratosPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ContratosPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ContratosPrx r = b as ContratosPrx;
                if(r == null)
                {
                    ContratosPrxHelper h = new ContratosPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ContratosPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ContratosPrxHelper h = new ContratosPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::model::Contratos"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ContratosPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ContratosPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ContratosPrxHelper result = new ContratosPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        [global::System.Serializable]
        public sealed class TheSystemPrxHelper : global::Ice.ObjectPrxHelperBase, TheSystemPrx
        {
            public TheSystemPrxHelper()
            {
            }

            public TheSystemPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public long getDelay(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDelayAsync(clientTime, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<long> getDelayAsync(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDelayAsync(clientTime, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_getDelayAsync(long iceP_clientTime, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDelay_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_getDelay(iceP_clientTime, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDelay_name = "getDelay";

            private void _iceI_getDelay(long iceP_clientTime, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _getDelay_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeLong(iceP_clientTime);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_TheSystem_getDelay> begin_getDelay(long clientTime, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDelay(clientTime, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDelay(long clientTime, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDelay(clientTime, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDelay(long clientTime, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDelay(clientTime, context, callback, cookie, false);
            }

            public long end_getDelay(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDelay_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TheSystem_getDelay> begin_getDelay(long iceP_clientTime, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDelay_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TheSystem_getDelay, long>(
                    (Callback_TheSystem_getDelay cb, long ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDelay_name, cookie, completedCallback);
                _iceI_getDelay(iceP_clientTime, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TheSystemPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TheSystemPrx r = b as TheSystemPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TheSystemPrxHelper h = new TheSystemPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TheSystemPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TheSystemPrx r = b as TheSystemPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TheSystemPrxHelper h = new TheSystemPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TheSystemPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TheSystemPrxHelper h = new TheSystemPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TheSystemPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TheSystemPrxHelper h = new TheSystemPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TheSystemPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TheSystemPrx r = b as TheSystemPrx;
                if(r == null)
                {
                    TheSystemPrxHelper h = new TheSystemPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TheSystemPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TheSystemPrxHelper h = new TheSystemPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::model::TheSystem"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TheSystemPrx v)
            {
                ostr.writeProxy(v);
            }

            public static TheSystemPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TheSystemPrxHelper result = new TheSystemPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Fivet.ZeroIce
{
    namespace model
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public abstract class ContratosDisp_ : global::Ice.ObjectImpl, Contratos
        {
            #region Slice operations

            public abstract Ficha ingresarFicha(Ficha ficha, global::Ice.Current current = null);

            public abstract Ficha obtenerFicha(int numero, global::Ice.Current current = null);

            public abstract Persona ingresarDueno(Persona dueno, global::Ice.Current current = null);

            public abstract Persona obtenerDueno(string rut, global::Ice.Current current = null);

            public abstract Control ingresarControl(Control control, global::Ice.Current current = null);

            public abstract Foto ingresarFoto(Foto foto, global::Ice.Current current = null);

            public abstract Examen ingresarExamen(Examen examen, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::model::Contratos"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_ingresarFicha(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Ficha iceP_ficha;
                iceP_ficha = null;
                istr.readValue((Ficha v) => {iceP_ficha = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.ingresarFicha(iceP_ficha, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_obtenerFicha(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_numero;
                iceP_numero = istr.readInt();
                inS.endReadParams();
                var ret = obj.obtenerFicha(iceP_numero, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_ingresarDueno(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Persona iceP_dueno;
                iceP_dueno = null;
                istr.readValue((Persona v) => {iceP_dueno = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.ingresarDueno(iceP_dueno, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_obtenerDueno(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_rut;
                iceP_rut = istr.readString();
                inS.endReadParams();
                var ret = obj.obtenerDueno(iceP_rut, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_ingresarControl(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Control iceP_control;
                iceP_control = null;
                istr.readValue((Control v) => {iceP_control = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.ingresarControl(iceP_control, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_ingresarFoto(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Foto iceP_foto;
                iceP_foto = null;
                istr.readValue((Foto v) => {iceP_foto = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.ingresarFoto(iceP_foto, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_ingresarExamen(Contratos obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Examen iceP_examen;
                iceP_examen = null;
                istr.readValue((Examen v) => {iceP_examen = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.ingresarExamen(iceP_examen, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "ingresarControl",
                "ingresarDueno",
                "ingresarExamen",
                "ingresarFicha",
                "ingresarFoto",
                "obtenerDueno",
                "obtenerFicha"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_ingresarControl(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_ingresarDueno(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_ingresarExamen(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_ingresarFicha(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_ingresarFoto(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_obtenerDueno(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_obtenerFicha(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public abstract class TheSystemDisp_ : global::Ice.ObjectImpl, TheSystem
        {
            #region Slice operations

            public abstract long getDelay(long clientTime, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::model::TheSystem"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDelay(TheSystem obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                long iceP_clientTime;
                iceP_clientTime = istr.readLong();
                inS.endReadParams();
                var ret = obj.getDelay(iceP_clientTime, current);
                var ostr = inS.startWriteParams();
                ostr.writeLong(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDelay",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getDelay(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
